openapi: 3.0.1
info:
  title: inriver REST API
  version: v1
paths:
  /api/v1.0.0/channels:
    get:
      tags:
        - Channel
      summary: Get channel id's for entity id
      description: ''
      operationId: GetChannelsForEntityId
      parameters:
        - name: forEntityId
          in: query
          description: optional
          schema:
            type: integer
            format: int32
        - name: includeChannels
          in: query
          description: optional, defaults to true
          schema:
            type: boolean
            default: true
        - name: includePublications
          in: query
          description: optional, defaults to false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelSummaryModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelSummaryModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelSummaryModel'
  /api/v1.0.0/channels/{channelId}/entitytypes:
    get:
      tags:
        - Channel
      summary: Get entity types for channel
      description: ''
      operationId: EntityTypes
      parameters:
        - name: channelId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1.0.0/channels/{channelId}/entitylist:
    get:
      tags:
        - Channel
      summary: Get a list of entities in a channel
      description: ''
      operationId: GetByLinkEntityType
      parameters:
        - name: channelId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: entityTypeId
          in: query
          description: optional, filter by entity type id
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityListModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityListModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityListModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/channels/{channelId}/entities/{entityId}/links:
    get:
      tags:
        - Channel
      summary: Get entity links
      description: ''
      operationId: GetByEntityType
      parameters:
        - name: channelId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: linkDirection
          in: query
          description: '"inbound" or "outbound"'
          schema:
            type: string
        - name: linkTypeId
          in: query
          description: optional, filter by link type
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/channels/{channelId}/entities/{entityId}/structureentities:
    get:
      tags:
        - Channel
      summary: Get structure entities for entity
      description: Returns all occurances of an entity in a channel
      operationId: GetChannelStructureEntities
      parameters:
        - name: channelId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StructureEntityModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StructureEntityModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StructureEntityModel'
  /api/v1.0.0/channels/{channelId}/nodes:
    get:
      tags:
        - Channel
      summary: Channel structure list
      operationId: GetChannelNodes
      parameters:
        - name: channelId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/channels/{channelId}/nodetree:
    get:
      tags:
        - Channel
      summary: Channel structure tree
      description: ''
      operationId: GetChannelNodeTree
      parameters:
        - name: channelId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/StructureNode'
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/StructureNode'
            text/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/StructureNode'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/channels/content/{path}:
    get:
      tags:
        - Channel
      summary: Channel path content
      description: Use the entity list to directly query data. Use the paths in the content array to traverse the channel structure.
      operationId: ChannelContent
      parameters:
        - name: path
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: entityTypeIds
          in: query
          description: optional, filter types using comma separated list
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChannelPathContentModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelPathContentModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ChannelPathContentModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/channels/queue:
    get:
      tags:
        - Channel
      summary: Get Channel queue messages for a customer environment.
      operationId: GetChannelMessagesAsync
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelMessageModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelMessageModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChannelMessageModel'
  /api/v1.0.0/channels/entityIds/{entityTypeId}:
    get:
      tags:
        - Channel
      summary: Get a list of channel entities of the specified entity type.
      operationId: GetChannelEntitiesAsync
      parameters:
        - name: entityTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: orphaned
          in: query
          description: <b>True</b> - get ids of entities not included in any channel.<br /><b>False</b> - get ids of entities included in at least one channel.<br /><b>Default value</b> - False.<br />
          schema:
            type: boolean
            default: false
        - name: linkRuleEnabled
          in: query
          description: <b>Not specified</b> - get all entity ids.<br /><b>True</b> - get ids of entities with configured link rules.<br /><b>False</b> - get ids of entities without configured link rules or with disabled link rules.<br /><b>Default value</b> - not specified.<br />
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            text/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  /api/v1.0.0/channels/{channelId}/rebuildchannelstate:
    get:
      tags:
        - Channel
      summary: Get the rebuild state of a channel.
      operationId: GetRebuildChannelState
      parameters:
        - name: channelId
          in: path
          description: The ID of the channel.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ChannelJobModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelJobModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ChannelJobModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.1/entities:fetchdata:
    post:
      tags:
        - Entity
      summary: Returns various types of entity data
      description: "Fetch data for a list of entity id's and specify what data to include (objects).\r\n\r\nSpecify what objects to include in a comma separated list. You may fetch different object sets for entities, inbound links, outbound links. Supply a \"linkEntityObjects\" string in the inbound or outbound object to include link entity data in the response.\r\n\r\nLink types may be specified for both inbound and outbound using linkTypeIds (a comma separated list of link type id's). If linkTypeIds is omitted no filtering will be applied.\r\n\r\nThe inbound and outbound relations are only fetched from the root entity.\r\n\r\nField data may be filtered by suppling a comma separated list as fieldTypeIds. The filter will be applied on all entities and linked entities regardless of entity type.\r\n\r\nAvailable objects\r\n-----\r\nEntitySummary<br />\r\nFieldsSummary<br />\r\nFieldValues<br />\r\nSpecificationSummary<br />\r\nSpecificationValues<br />\r\nMedia<br />\r\nMediaDetails<br />\r\n\r\nExamples:<br />\r\n\"objects\": \"EntitySummary,Media\" <br />\r\n\"linkEntityObjects\": \"FieldValues\" (applicable to inbound and outbound links only)<br />\r\n\r\nAlways request as few objects as possible as this will reduce the response time.\r\n\r\nLimit: 1000 entity ids per request."
      operationId: FetchData
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FetchObjectsModel'
          application/json:
            schema:
              $ref: '#/components/schemas/FetchObjectsModel'
          text/json:
            schema:
              $ref: '#/components/schemas/FetchObjectsModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FetchObjectsModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityDataModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityDataModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityDataModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities:upsert:
    post:
      tags:
        - Entity
      summary: Insert or update entities and links
      description: "Insert or update entities and links. There is no need to know entity id's or link id's on the client side.\r\nEntities are identified using any combination of field values \r\n            \r\nIf the entity already exists it will be updated with the supplied data.\r\nIf the entity doesn't exist it will be inserted with the supplied data.\r\n            \r\nThis endpoint accepts an **array** of entity data parameters.\r\n            \r\n### Parameters:\r\n            \r\nentityTypeId:\r\n  - The type of entity to insert or update\r\n            \r\nkeyFieldTypeIds:\r\n  - An array of field type id's making up the key to locate existing entities for updates\r\n  - Use multiple field type id's to define a composite key\r\n  - The actual key field values must exist in the *fieldValues* array\r\n            \r\nfieldValues:\r\n  - Each field value is defined as an array of two elements, FieldTypeId and value, such as __[\"MyFieldTypeId\", \"My value\"]__\r\n  - Must at least contain the field types used as key in keyFieldTypeIds\r\n  - An array of field values being updated\r\n            \r\nfieldSetOptions:\r\n  - Omit *fieldSetOptions* or set to null to leave existing field set unchanged\r\n  - Set *fieldSetId* to null to remove the field set\r\n            \r\nspecificationData:\r\n  - Omit *specificationData* or set to null to keep existing specification data intact\r\n  - Set *specfication* AND *specificationValues* to null to delete the specification\r\n  - Set *specfication* to assign a specification template. This can be done in three ways:\r\n    - Entity Id of the specification template (must be set as integer value)\r\n    - The name of the specification template (as string value). The display name field type for Specification will be used for lookup. Note that this field type must have the unique flag enabled.\r\n    - Specify a 2 element array defining field type id and value: __[\"FieldTypeId\", \"My value\"]__\r\n      - Field type must have the unique flag enabled\r\n  - Each value in *specificationValues* is defined as an array of two elements, SpecificationFieldTypeId and value, such as __[\"MyFieldTypeId\", \"My value\"]__\r\n            \r\nsegment:\r\n  - If *segment* is omitted in a multi segment environment, the entity will be created in a segment the user has access to. It's recommended to omit segmentId at all times if the enviroment doesn't have multiple segments.\r\n  - The segment may be set in two ways:\r\n    - Segment Id (must be set as integer value)\r\n    - Segment Name (must be set as string value)\r\n            \r\nlinks:\r\n  - Omit *links* or set to null to leave existing links unchanged\r\n  - *linkInsertAction* defines whether new links are active or inactive. Omitting *linkInsertAction* equals \"Activate\".\r\n    - Possible values:\r\n      - *Activate* (default value - activate new links)\r\n      - *Inactivate* (inactivate new links)\r\n  - *linkUpdateAction* defines whether updated links are active, inactive or unchanged. Omitting *linkInsertAction* equals \"None\".\r\n    - Possible values: \r\n      - *None* (default value - no change to existing links)\r\n      - *Activate* (activate existing links)\r\n      - *Inactivate* (inactivate existing links)\r\n  - *staleLinkAction* defines how to handle existing (stale) links not present in the submitted links array. There is no need to explicitly unlink or inactivate existing links since they are implicitly considered \"stale\" if not included in the submitted links array. Omitting *staleLinkAction* equals \"None\".\r\n    - Possible values:\r\n      - *None* (default value - stale links will not be modified)\r\n      - *Inactivate* (inactivate stale links)\r\n      - *Unlink* (stale links will be removed)\r\n      - *UnlinkAndDeleteOrphans*\r\n        - Same as \"Unlink\" but also deletes the linked entity in case it will be left without any links at all (orphaned)\r\n        - Use with caution since deleted entities can't be restored\r\n            \r\n            \r\n### Response object:\r\n            \r\nerrors:\r\n  - Array of accumulated errors for the entire upsert operation\r\n  - Errors are defined as [path, errorCode, errorMessage]\r\n            \r\nerrorCount:\r\n  - The length of the errors array\r\n            \r\ninsertedEntities, updatedEntities, deletedEntities:\r\n  - Each element is defined as [path, entityId]\r\n  - Note that deletedEntities will always be empty unless *UnlinkAndDeleteOrphans* is explicitly enabled"
      operationId: Upsert
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EntityUpsertDataModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EntityUpsertDataModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EntityUpsertDataModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EntityUpsertDataModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UpsertResponseModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UpsertResponseModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UpsertResponseModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/summary:
    get:
      tags:
        - Entity
      summary: Returns a read only entity summary
      operationId: GetEntitySummary
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}:
    delete:
      tags:
        - Entity
      summary: Delete an entity
      operationId: DeleteEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.1/entities:createnew:
    post:
      tags:
        - Entity
      summary: Create a new entity
      description: "If segmentId is omitted in a multi segment environment, the entity will be created in a segment the user has access\r\nto. It's recommended to omit segmentId at all times if the enviroment doesn't have multiple segments."
      operationId: CreateEntity
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/EntityCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/EntityCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EntityCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities:getempty:
    get:
      tags:
        - Entity
      summary: Returns an entity creation model
      description: "The fieldValues array will contain all fields required to create an entity (usually all mandatory and unique\r\nfields)."
      operationId: GetEmptyEntity
      parameters:
        - name: entityTypeId
          in: query
          description: ''
          schema:
            type: string
        - name: fieldSetId
          in: query
          description: optional
          schema:
            type: string
        - name: allFields
          in: query
          description: optional, include all fields (not included in a field set)
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityCreationModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityCreationModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityCreationModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities:mapuniquevalues:
    post:
      tags:
        - Entity
      summary: Returns a dictionary of unique values and entity id's
      operationId: MapUniqueValues
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/MapUniqueValuesModel'
          application/json:
            schema:
              $ref: '#/components/schemas/MapUniqueValuesModel'
          text/json:
            schema:
              $ref: '#/components/schemas/MapUniqueValuesModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/MapUniqueValuesModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
            text/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/completenessdetails:
    get:
      tags:
        - Entity
      summary: Returns a completeness details
      operationId: CompletenessDetails
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CompletenessDetailsModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CompletenessDetailsModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CompletenessDetailsModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/summary/fields:
    get:
      tags:
        - Entity
      summary: Returns a read only list of field values
      operationId: GetFields
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldTypeIds
          in: query
          description: optional, filter types using comma separated list
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldSummaryModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldSummaryModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldSummaryModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/fieldvalues:
    get:
      tags:
        - Entity
      summary: Returns a list of field values
      operationId: GetFieldValues
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldTypeIds
          in: query
          description: optional, filter types using comma separated list
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldValueModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldValueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldValueModel'
    put:
      tags:
        - Entity
      summary: Update field values
      description: The list may be an subset of available field values
      operationId: SetFieldValues
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FieldValueModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FieldValueModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FieldValueModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/FieldValueModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldValueModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldValueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldValueModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/fieldvalues/{fieldTypeId}/revisions:
    get:
      tags:
        - Entity
      summary: Field value revisions
      operationId: FieldHistory
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldRevisionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldRevisionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldRevisionModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/fieldset:
    put:
      tags:
        - Entity
      summary: Set field set
      description: Set fieldSetId to null to remove the field set
      operationId: SetFieldSet
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SetFieldSetModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SetFieldSetModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SetFieldSetModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SetFieldSetModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
  /api/v1.0.0/entities/{entityId}/summary/specification:
    get:
      tags:
        - Entity
      summary: Returns a read only list of specification field values
      operationId: GetSpecificationSummary
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: specificationFieldTypeIds
          in: query
          description: optional, filter types using comma separated list
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueSummaryModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueSummaryModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueSummaryModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/specificationvalues:
    get:
      tags:
        - Entity
      summary: Returns a list of specification field values
      operationId: GetSpecificationValues
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: specificationFieldTypeIds
          in: query
          description: optional, filter types using comma separated list
          schema:
            type: string
        - name: mandatoryOnly
          in: query
          description: optional
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Entity
      summary: Update specification field values
      description: The list may be an subset of available specification field values
      operationId: UpdateSpecificationValues
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SpecificationValueModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SpecificationValueModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SpecificationValueModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SpecificationValueModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationValueModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/specificationtemplate:
    put:
      tags:
        - Entity
      summary: Set specification template
      description: Set SpecificationId to null for removing specification template
      operationId: SetSpecificationTemplate
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SetSpecificationTemplateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SetSpecificationTemplateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SetSpecificationTemplateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SetSpecificationTemplateModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/segment:
    put:
      tags:
        - Entity
      summary: Set entity segment
      description: ''
      operationId: SetSegment
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SetSegmentModel'
          application/json:
            schema:
              $ref: '#/components/schemas/SetSegmentModel'
          text/json:
            schema:
              $ref: '#/components/schemas/SetSegmentModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SetSegmentModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntitySummaryModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/links:
    get:
      tags:
        - Entity
      summary: Returns a list of links
      operationId: GetLinksForEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: linkDirection
          in: query
          description: optional, "inbound" or "outbound"
          schema:
            type: string
        - name: linkTypeId
          in: query
          description: optional, filter by link type
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/linksandfields:
    get:
      tags:
        - Entity
      summary: Returns a bundle of the entity and all linked entities
      operationId: GetEntityBundle
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: fieldTypeIds
          in: query
          description: optional, filter field types using comma separated list
          schema:
            type: string
        - name: linkDirection
          in: query
          description: optional, "inbound" or "outbound"
          schema:
            type: string
        - name: linkTypeId
          in: query
          description: optional, filter by link type
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityBundleModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBundleModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityBundleModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/media:
    get:
      tags:
        - Entity
      summary: Returns a read only list of media resources linked to the entity
      operationId: GetAllMedia
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/mediadetails:
    get:
      tags:
        - Entity
      summary: Returns a read only detailed list of media resources linked to the entity
      operationId: GetMediaDetails
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaInfoModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaInfoModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaInfoModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/media:uploadbase64:
    post:
      tags:
        - Entity
      summary: Add Media
      description: "Upload base64 encoded file data.\r\nEnter entityId for the entity you want to link the created resource entity to.\r\nExample: You want to create a resource and then link it to a Product. You add the entityId for the product entity\r\nthat you would like to link the resource entity to."
      operationId: UploadBase64FileByEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/media:uploadfromurl:
    post:
      tags:
        - Entity
      summary: Add Media
      description: "Enter entityId for the entity you want to link the created resource entity to.\r\nExample: You want to create a resource and then link it to a Product. You add the entityId for the product entity\r\nthat you would like to link the resource entity to.\r\nNote: If overrideUrlFileName is omitted, the filename will equal the one supplied in the url. Set\r\noverrideUrlFileName to specifiy a file name."
      operationId: UploadMediaFromUrlByEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UrlFileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UrlFileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UrlFileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UrlFileModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/media:addexternalurl:
    post:
      tags:
        - Entity
      summary: Add external media url
      description: "Enter entityId for the entity you want to link the created resource entity to.\r\nExample:\r\nYou want to create a resource and then link it to a Product. You add the entityId for the product entity that you\r\nwould like to link the resource entity to.\r\nOriginal external file URL that is added with this REST endpoint\r\nhttps://yourexternalresourceservice.com/imagename.jpg\r\nYour external image service then need to support the standard inRiver image configuration formats(Original,\r\nPreview, Thumbnail and SmallThumbnail) as a suffix on the URL that you uploaded or have a proxy that redirect to\r\nthe right image format, else the inRiver web portal will not work correct.\r\nhttps://yourexternalresourceservice.com/imagename.jpg/Original <br />\r\nhttps://yourexternalresourceservice.com/imagename.jpg/Preview <br />\r\nhttps://yourexternalresourceservice.com/imagename.jpg/Thumbnail <br />\r\nhttps://yourexternalresourceservice.com/imagename.jpg/SmallThumbnail <br />"
      operationId: AddExternalUrlByEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExeternalUrlFileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExeternalUrlFileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExeternalUrlFileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExeternalUrlFileModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/comments:
    get:
      tags:
        - Entity
      summary: Entity comments
      operationId: Comments
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Entity
      summary: Post entity comment
      operationId: CreateComment
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CommentModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CommentModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CommentModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CommentModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CommentModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CommentModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CommentModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/{entityId}/comments/{commentId}:
    delete:
      tags:
        - Entity
      summary: Delete entity comment
      operationId: DeleteComment
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: commentId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/entities/starred:
    get:
      tags:
        - Entity
      summary: Get list of starred entities
      operationId: StarredEntities
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            text/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
    put:
      tags:
        - Entity
      summary: Update list of starred entities
      operationId: UpdateStarredEntities
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            text/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  /api/v1.0.0/entities/segments:
    get:
      tags:
        - Entity
      summary: Get All Segments
      operationId: GetAllSegments
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Segment'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Segment'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Segment'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions:
    get:
      tags:
        - Extension
      summary: Return a list of all extensions that have been added to the environment.
      operationId: GetAllExtensions
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionModel'
    post:
      tags:
        - Extension
      summary: Add extension.
      description: "**extensionId**: The Unique ID of your new extension. The basic restrictions are:\r\n* Maximum length 50 characters\r\n            \r\nBest practice\r\n* Use character set A to Z, a to z, 0-9.\r\n* Characters such as spaces, underscores, hyphens, etc. should not be used.\r\n            \r\n**extensionType**: State the type of extension you have created. Valid values:\r\n* ChannelListener\r\n* CompletenessCriteria\r\n* CompletenessListener\r\n* CustomValueList\r\n* CVLListener\r\n* EntityListener\r\n* InboundDataExtension\r\n* InboundFileExtension\r\n* LinkListener\r\n* PrintFormatter\r\n* PrintImageCustomAttribute\r\n* PrintTextCustomAttribute\r\n* ScheduledExtension\r\n* ServerExtension\r\n* SpecificationListener\r\n* SyndicationExtension\r\n            \r\n**assemblyName**: Write the full name of the assembly that contains your extension's class.\r\n            \r\n**packageId**: You need to upload a package /packages:uploadbase64 before a new extension can be created. It will also return a package ID. Or fetch the package ID via endpoint /packages.\r\n            \r\n**assemblyType**: The type including the namespace of the extension's class. It should be in the format \"namespace\".\"class name\". An example would be MyCompany.inRiver.Connectors.Outbound.EpiServerChannelListener for the EpiServerChannelListener\r\n                   in the MyCompany.inRiver.Connectors.Outbound namespace. This field is case sensitive. Casing must match your namespace and class exactly."
      operationId: AddExtension
      requestBody:
        description: The extension model to add.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtensionCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtensionCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtensionCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}:
    get:
      tags:
        - Extension
      summary: Get information on a specific extension by its extension ID.
      operationId: GetExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Extension
      summary: Delete an extension by its extension ID.
      operationId: DeleteExtension
      parameters:
        - name: extensionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}/apikey:
    put:
      tags:
        - Extension
      summary: Set an apikey on an inbound extension of extensionType.
      description: '* InboundDataExtension or InboundFileExtension.'
      operationId: SetExtensionApiKet
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      requestBody:
        description: ApiKey value
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtensionApiKeyModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionApiKeyModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtensionApiKeyModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtensionApiKeyModel'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}/settings:
    get:
      tags:
        - Extension
      summary: Get all of the settings that have been added to an extension.
      operationId: GetExtensionSettings
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionSettingModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionSettingModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionSettingModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Extension
      summary: Add or update one extension setting.
      description: Once you have added new settings you need to call the endpoint settings:reload to make the new settings available in Context.Settings in your extension.
      operationId: AddOrUpdateExtensionSetting
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      requestBody:
        description: The Key-Value pair for setting identification.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExtensionSettingModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ExtensionSettingModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ExtensionSettingModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExtensionSettingModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionSettingModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionSettingModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionSettingModel'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}/statistics:
    get:
      tags:
        - Extension
      summary: Get extension statistics.
      description: "The statistics are refreshed at 60 second intervals.\r\n            \r\nCalling the endpoint more frequently than this will simply return the same measurements, and may have a negative effect on performance.\r\nLimit the number of calls to what is appropriate for your purpose, and consider whether a longer polling of the statistics is sufficient.\r\n            \r\nStatistics may be requested for the following extension types:\r\n            \r\n* EntityListener <br />\r\n* ChannelListener <br />\r\n* CompletenessListener <br />\r\n* CVLListener <br />\r\n* LinkListener <br />\r\n* SegmentationListener <br />\r\n* SpecificationListener"
      operationId: GetExtensionEventStats
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
            text/json:
              schema:
                type: object
                additionalProperties: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}/settings/{key}:
    delete:
      tags:
        - Extension
      summary: Delete one extension setting by its key.
      operationId: DeleteExtensionSetting
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: The key for setting identification
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
    get:
      tags:
        - Extension
      summary: Get extension setting
      description: "Get extension setting by passing the extensions id (extensionId)\r\nand the setting key (key) to the api endpoint."
      operationId: GetExtensionSetting
      parameters:
        - name: extensionId
          in: path
          description: The extensions id.
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: The extension setting key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionSettingModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionSettingModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionSettingModel'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}/settings:applydefaults:
    post:
      tags:
        - Extension
      summary: Apply default extension settings
      operationId: ApplyDefaultExtensionSettings
      parameters:
        - name: extensionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionSettingModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionSettingModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExtensionSettingModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}/settings:reload:
    post:
      tags:
        - Extension
      summary: Triggers a reload of all settings to be accessible from Context.Settings in the extension.
      description: You need to reload service settings.
      operationId: ReloadSettingsForExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}/status:
    get:
      tags:
        - Extension
      summary: Get the current status for if the extension is enabled/disabled.
      description: "You also get the setting if it is paused. Please note that it is only extension of types\r\n* ChannelListener\r\n* CompletenessListener\r\n* CVLListener\r\n* EntityListener\r\n* LinkListener\r\n* SpecificationListener\r\n\r\nthat can be paused. An extension should never be paused more than a short period of time (1 hour) as all events are being queued up."
      operationId: GetExtensionStatus
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}/filtertypes:
    get:
      tags:
        - Extension
      summary: Get applicable filter types.
      description: "Applicable extension types:\r\n* ChannelListener\r\n* CompletenessListener\r\n* CVLListener\r\n* EntityListener\r\n* LinkListener\r\n* SpecificationListener\r\n* SegmentationListener\r\n* ServerExtension\r\n            \r\nMay be used as a reference to determine possible filter configurations."
      operationId: GetAllFilterTypes
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterTypeModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterTypeModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterTypeModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterTypeModel'
  /api/v1.0.0/extensions/{extensionId}/filterconfigurations:
    get:
      tags:
        - Extension
      summary: Get filter configurations.
      description: "Applicable extension types:\r\n* ChannelListener\r\n* CompletenessListener\r\n* CVLListener\r\n* EntityListener\r\n* LinkListener\r\n* SpecificationListener\r\n* SegmentationListener\r\n* ServerExtension"
      operationId: GetAllFilterConfigurations
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Extension
      summary: Update a filter configuration.
      description: "Applicable extension types:\r\n* ChannelListener\r\n* CompletenessListener\r\n* CVLListener\r\n* EntityListener\r\n* LinkListener\r\n* SpecificationListener\r\n* SegmentationListener\r\n* ServerExtension\r\n            \r\nThe configuration is supplied as an array of strings representing values allowed to pass the event filter.<br />\r\nIt's valid to submit a subset of filter configurations (the configurations not submitted will remain unmodified).<br />\r\nSet configuration to null to disable a filter.<br />"
      operationId: UpdateFilterConfigurations
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}/filterconfigurations/{filterTypeName}:
    get:
      tags:
        - Extension
      summary: Get a filter configuration.
      description: "Applicable extension types:\r\n* ChannelListener\r\n* CompletenessListener\r\n* CVLListener\r\n* EntityListener\r\n* LinkListener\r\n* SpecificationListener\r\n* SegmentationListener\r\n* ServerExtension"
      operationId: GetFilterConfiguration
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
        - name: filterTypeName
          in: path
          description: The filter type name.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ConnectEventFilterConfigurationModel'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/{extensionId}:enable:
    post:
      tags:
        - Extension
      summary: Enable a disabled extension.
      operationId: EnableExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}:disable:
    post:
      tags:
        - Extension
      summary: Disable an enabled extension.
      operationId: DisableExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}:resume:
    post:
      tags:
        - Extension
      summary: Resume a paused extension.
      operationId: ResumeExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}:pause:
    post:
      tags:
        - Extension
      summary: Pause an extension.
      description: "Please note that it is only extensions of types\r\n* ChannelListener\r\n* CompletenessListener\r\n* CVLListener\r\n* EntityListener\r\n* LinkListener\r\n* SpecificationListener\r\n\r\nthat can be paused. Also note that an extension should never be paused more than a short period of time (1 hour) as all events are being queued up."
      operationId: PauseExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtensionStatusModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}:run:
    post:
      tags:
        - Extension
      summary: Run an extension of type ScheduledExtension.
      description: Note you can run an enabled or disabled extension.
      operationId: RunExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}:test:
    post:
      tags:
        - Extension
      summary: Test an extension.
      description: Response message is the string that you return in your implementation of the Test method in the extension.
      operationId: TestExtension
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/{extensionId}:isrunning:
    get:
      tags:
        - Extension
      summary: Return if the extension is running.
      operationId: ExtensionIsRunning
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RunningExtensionModel'
            application/json:
              schema:
                $ref: '#/components/schemas/RunningExtensionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/RunningExtensionModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/extensions/queue:
    get:
      tags:
        - Extension
      summary: Get Extensions queue messages for a customer environment.
      operationId: GetQueuedConnectMessagesAsync
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectMessageModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectMessageModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectMessageModel'
    delete:
      tags:
        - Extension
      summary: Delete all queued connect messages.
      operationId: DeleteAllConnectMessagesAsync
      responses:
        '204':
          description: No Content
  /api/v1.0.0/extensions/queue/{extensionId}:
    delete:
      tags:
        - Extension
      summary: Delete queued connect messages with a specified extensionId in a set time frame between a start date and an end date.
      operationId: DeleteQueuedConnectMessagesAsync
      parameters:
        - name: extensionId
          in: path
          description: The unique ExtensionId.
          required: true
          schema:
            type: string
        - name: startDateUtc
          in: query
          description: Start date of the request in Coordinated Universal Time.
          schema:
            type: string
            format: date-time
        - name: endDateUtc
          in: query
          description: End date of the request in Coordinated Universal Time.
          schema:
            type: string
            format: date-time
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/extensions/connectorstates:
    get:
      tags:
        - Extension
      summary: Get all ConnectorStates
      operationId: GetAllConnectorStatesAsync
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorStateModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorStateModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorStateModel'
    post:
      tags:
        - Extension
      summary: Add a ConnectorState
      operationId: AddConnectorStateAsync
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ConnectorStateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorStateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ConnectorStateModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Extension
      summary: Delete all ConnectorStates
      operationId: DeleteAllConnectorStatesAsync
      responses:
        '204':
          description: No Content
  /api/v1.0.0/extensions/connectorstates/{connectorId}:
    get:
      tags:
        - Extension
      summary: Get all ConnectorStates for Connector
      operationId: GetAllConnectorStatesByConnectorIdAsync
      parameters:
        - name: connectorId
          in: path
          description: Connector ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorStateModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorStateModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConnectorStateModel'
  /api/v1.0.0/extensions/connectorstates/{id}:
    put:
      tags:
        - Extension
      summary: Update a ConnectorState
      operationId: UpdateConnectorStateAsync
      parameters:
        - name: id
          in: path
          description: ConnectorState Id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ConnectorStateModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ConnectorStateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorStateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/ConnectorStateModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Extension
      summary: Delete a ConnectorState
      operationId: DeleteConnectorStateAsync
      parameters:
        - name: id
          in: path
          description: ConnectorState Id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /api/v1.0.0/extensions/connectorstates/connector/{connectorId}:
    delete:
      tags:
        - Extension
      summary: Delete all ConnectorStates for Connector
      operationId: DeleteConnectorStateForConnectorAsync
      parameters:
        - name: connectorId
          in: path
          description: Connector Id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
  /api/v1.0.0/extensionmanager:restartservice:
    put:
      tags:
        - Extension
      summary: Restart all extensions.
      description: If you have uploaded a new package of a current extension then you should restart the service to make sure that the new extension is loaded instead of the old extension.
      operationId: PutRestartService
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '500':
          description: Server Error
    post:
      tags:
        - Extension
      summary: Restart all extensions.
      description: If you have uploaded a new package of a current extension then you should restart the service to make sure that the new extension is loaded instead of the old extension.
      operationId: PostRestartService
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema: {}
            application/json:
              schema: {}
            text/json:
              schema: {}
        '500':
          description: Server Error
  /api/v1.0.0/packages:
    get:
      tags:
        - Extension
      summary: Lists all packages that have been added.
      operationId: GetAllPackages
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PackageModel'
  /api/v1.0.0/packages/{packageId}:
    get:
      tags:
        - Extension
      summary: Get a package.
      operationId: GetPackage
      parameters:
        - name: packageId
          in: path
          description: The unique PackageId.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PackageModel'
            application/json:
              schema:
                $ref: '#/components/schemas/PackageModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PackageModel'
    delete:
      tags:
        - Extension
      summary: Delete a package.
      description: Note that you need to remove the extension before you can remove the package.
      operationId: DeletePackage
      parameters:
        - name: packageId
          in: path
          description: The unique PackageId.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/packages/{packageId}/content:
    get:
      tags:
        - Extension
      summary: Get package content.
      operationId: GetPackageContent
      parameters:
        - name: packageId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/Base64FileModel'
            application/json:
              schema:
                $ref: '#/components/schemas/Base64FileModel'
            text/json:
              schema:
                $ref: '#/components/schemas/Base64FileModel'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/packages:uploadbase64:
    post:
      tags:
        - Extension
      summary: Upload base64 encoded file data of the package.
      description: "    Upload base64 encoded file data.\r\nTo create a package, zip all the files in your build directory including your compiled code and all referenced assemblies.\r\nThe .zip file must be uploaded via endpoint /packages:uploadbase64 before a new extension can be created.\r\nOnce uploaded, fetch the the package ID via endpoint /packages.\r\nBest practice is to include the version in the .zip file name.\r\nFor example OutboundConnector.2.12.6.zip"
      operationId: UploadPackage
      requestBody:
        description: Package data file to upload
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PackageModel'
            application/json:
              schema:
                $ref: '#/components/schemas/PackageModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PackageModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/packages/{packageId}:uploadandreplacebase64:
    post:
      tags:
        - Extension
      summary: Exchange base64 encoded file data of the package to a new version.
      description: "Note that after you have uploaded a new version of a package you need to extensionmanager:restartservice to make sure the new extension is loaded instead of the old extension,\r\nor remove the extension and add it again. Best practice is to disable or pause extensions before you do an extensionmanager:restartservice to make sure you keep all messages\r\nand then enable / resume the extensions. Also note that scheduled extensions will be restarted."
      operationId: UpdatePackage
      parameters:
        - name: packageId
          in: path
          description: The unique PackageId.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Package data file to upload
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          application/json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          text/json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Base64FileModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/PackageModel'
            application/json:
              schema:
                $ref: '#/components/schemas/PackageModel'
            text/json:
              schema:
                $ref: '#/components/schemas/PackageModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/HtmlTemplate:
    get:
      tags:
        - HtmlTemplate
      summary: Get all HTML Templates
      operationId: GetAllHtmlTemplates
      parameters:
        - name: includeData
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HtmlTemplateModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HtmlTemplateModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HtmlTemplateModel'
    post:
      tags:
        - HtmlTemplate
      summary: Add HTML Template
      operationId: AddHtmlTemplate
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - HtmlTemplate
      summary: Update HTML Template
      operationId: UpdateHtmlTemplate
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateModel'
          application/json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateModel'
          text/json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/HtmlTemplateModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - HtmlTemplate
      summary: Delete All HTML Templates
      operationId: DeleteAllHtmlTemplates
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/HtmlTemplate/{id}:
    get:
      tags:
        - HtmlTemplate
      summary: Get HTML Template
      operationId: GetHtmlTemplate
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
            application/json:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
            text/json:
              schema:
                $ref: '#/components/schemas/HtmlTemplateModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - HtmlTemplate
      summary: Delete HTML Template
      operationId: DeleteHtmlTemplate
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/HtmlTemplate/type:
    get:
      tags:
        - HtmlTemplate
      summary: Get all HTML Templates by Types
      operationId: GetHtmlTemplatesByTypes
      parameters:
        - name: contentStoreHtmlTemplateTypes
          in: query
          description: 'Supports the following values: "EnrichPDFTemplate", "EnrichPreviewTemplate", "PlanReleasePreviewTemplate", "EditTemplate", "ApplicationTemplate", "PortalTemplate", "ContentStoreTemplate", "ContentStoreCoverPage", "ContentStoreEndPage".'
          schema:
            type: array
            items:
              type: string
        - name: includeData
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HtmlTemplateModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HtmlTemplateModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HtmlTemplateModel'
  /api/v1.0.0/links/{linkId}:
    get:
      tags:
        - Link
      summary: Returns a link
      operationId: GetLink
      parameters:
        - name: linkId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LinkModel'
            application/json:
              schema:
                $ref: '#/components/schemas/LinkModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LinkModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Link
      summary: Delete link
      operationId: DeleteLink
      parameters:
        - name: linkId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/links:
    post:
      tags:
        - Link
      summary: Create a new link
      description: "Set index to 0 to add the link to first position. Set index to null to add the link to last position. Specifying\r\nthe index will reorganize all link indices."
      operationId: CreateLink
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LinkModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LinkModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LinkModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LinkModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LinkModel'
            application/json:
              schema:
                $ref: '#/components/schemas/LinkModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LinkModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/links/sortorder:
    put:
      tags:
        - Link
      summary: Update sort order of links
      operationId: UpdateLink
      requestBody:
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/links/{entityId}/{linkTypeId}/{direction}:
    delete:
      tags:
        - Link
      summary: Delete All Links For LinkType
      operationId: DeleteAllLinksForLinkTypeAsync
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
        - name: linkTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: direction
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/linkrules:
    get:
      tags:
        - LinkRule
      summary: Get all link rule definitions.
      operationId: GetAllLinkRuleDefinitions
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
    delete:
      tags:
        - LinkRule
      summary: Delete specified link rule definitions.
      operationId: DeleteLinkRulesAsync
      requestBody:
        description: List of link rule definition ids.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
      responses:
        '200':
          description: Success
  /api/v1.0.0/linkrules/{entityId}:
    get:
      tags:
        - LinkRule
      summary: Get link rule definitions for entity.
      operationId: GetLinkRuleDefinitionsForEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
    post:
      tags:
        - LinkRule
      summary: Create link rule definitions for entity.
      operationId: CreateLinkRuleDefinitionsForEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionCreationModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionCreationModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionCreationModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
    put:
      tags:
        - LinkRule
      summary: Update link rule definitions for entity.
      operationId: UpdateLinkRuleDefinitionsForEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionModel'
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionModel'
          text/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionModel'
          application/*+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/LinkRuleDefinitionModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkRuleDefinitionModel'
    delete:
      tags:
        - LinkRule
      summary: Delete link rule definitions for entity.
      operationId: DeleteLinkRuleDefinitionsForEntity
      parameters:
        - name: entityId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/linkrules/disable:
    put:
      tags:
        - LinkRule
      summary: Disable specified link rule definitions.
      operationId: DisableLinkRulesAsync
      requestBody:
        description: List of link rule definition ids.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
      responses:
        '200':
          description: Success
  /api/v1.0.0/linkrules/enable:
    put:
      tags:
        - LinkRule
      summary: Enable specified link rule definitions.
      description: <b>Note!</b> Do not use parallelism when using this endpoint, as this will decrease system performance.<br />
      operationId: EnableLinkRulesAsync
      requestBody:
        description: List of link rule definition ids.
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: true
      responses:
        '200':
          description: Success
  /api/v1.0.0/media:uploadbase64:
    post:
      tags:
        - Media
      summary: Add Media
      description: "Upload base64 encoded file data. A resource entity will be created.\r\nIf the resourceLink object is omitted a resource entity will be created without a link. If resourceLink.linkTypeId\r\nis omitted inRiver will automatically find the most suitable link type."
      operationId: UploadBase64File
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Base64FileModelWithLink'
          application/json:
            schema:
              $ref: '#/components/schemas/Base64FileModelWithLink'
          text/json:
            schema:
              $ref: '#/components/schemas/Base64FileModelWithLink'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Base64FileModelWithLink'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/media:uploadfromurl:
    post:
      tags:
        - Media
      summary: Add Media
      description: "Note: If overrideUrlFileName is omitted, the filename will equal the one supplied in the url. Set\r\noverrideUrlFileName to specifiy a file name.\r\nIf the resourceLink object is omitted a resource entity will be created without a link. If resourceLink.linkTypeId\r\nis omitted inRiver will automatically find the most suitable link type."
      operationId: UploadMediaFromUrl
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UrlFileModelWithLink'
          application/json:
            schema:
              $ref: '#/components/schemas/UrlFileModelWithLink'
          text/json:
            schema:
              $ref: '#/components/schemas/UrlFileModelWithLink'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UrlFileModelWithLink'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/media:addexternalurl:
    post:
      tags:
        - Media
      summary: Add external media url
      description: "If the resourceLink object is omitted a resource entity will be created without a link. If resourceLink.linkTypeId\r\nis omitted inRiver will automatically find the most suitable link type.\r\nExample:\r\nOriginal external file URL that is added with this REST endpoint\r\nhttps://yourexternalresourceservice.com/imagename.jpg\r\nYour external image service then need to support the standard inRiver image configuration formats(Original,\r\nPreview, Thumbnail and SmallThumbnail) as a suffix on the URL that you uploaded or have a proxy that redirect to\r\nthe right image format, else the inRiver web portal will not work correct.\r\nhttps://yourexternalresourceservice.com/imagename.jpg/Original <br />\r\nhttps://yourexternalresourceservice.com/imagename.jpg/Preview <br />\r\nhttps://yourexternalresourceservice.com/imagename.jpg/Thumbnail <br />\r\nhttps://yourexternalresourceservice.com/imagename.jpg/SmallThumbnail <br />"
      operationId: AddExternalUrl
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ExternalUrlFileModelWithLink'
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalUrlFileModelWithLink'
          text/json:
            schema:
              $ref: '#/components/schemas/ExternalUrlFileModelWithLink'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ExternalUrlFileModelWithLink'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            application/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
            text/json:
              schema:
                $ref: '#/components/schemas/MediaInfoModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.1/model/entitytypes:
    get:
      tags:
        - Model
      summary: Returns available entity types
      operationId: GetAllEntityTypesV101
      parameters:
        - name: entityTypeIds
          in: query
          description: optional, filter types using comma separated list
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityTypeModelV2'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityTypeModelV2'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityTypeModelV2'
    post:
      tags:
        - Model
      summary: Adds an EntityType.
      description: Requires the permission "ManageModel".
      operationId: AddEntityType
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.1/model/entitytypes/{entityTypeId}:
    get:
      tags:
        - Model
      summary: Gets a single EntityType.
      operationId: GetEntityType
      parameters:
        - name: entityTypeId
          in: path
          description: Id of the EntityType, such as Product or Item.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Model
      summary: Updates an EntityType.
      description: Requires the permission "ManageModel".
      operationId: UpdateEntityType
      parameters:
        - name: entityTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/EntityTypeCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityTypeModelV2'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Model
      summary: Deletes an EntityType.
      description: Requires the permission "ManageModel".
      operationId: DeleteEntityType
      parameters:
        - name: entityTypeId
          in: path
          description: Id of the EntityType, such as Product or Item.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.1/model/entitytypes/{entityTypeId}/fieldtypes:
    get:
      tags:
        - Model
      summary: Get all FieldTypes for a particular EntityType.
      operationId: GetAllFieldTypesForEntityType
      parameters:
        - name: entityTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldTypeModelV2'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldTypeModelV2'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldTypeModelV2'
    post:
      tags:
        - Model
      summary: Create a new field type
      description: Requires the permission "ManageModel".
      operationId: AddFieldType
      parameters:
        - name: entityTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
          application/json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
          text/json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.1/model/entitytypes/{entityTypeId}/fieldtypes/{fieldTypeId}:
    get:
      tags:
        - Model
      summary: Get a single FieldType.
      operationId: GetFieldType
      parameters:
        - name: entityTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: fieldTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Model
      summary: Update an existing FieldType.
      description: Requires the permission "ManageModel".
      operationId: UpdateFieldType
      parameters:
        - name: entityTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: fieldTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: Note that partial updates are not supported.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
          application/json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
          text/json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FieldTypeModelV2'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldTypeModelV2'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Model
      summary: Delete field type
      description: Requires the permission "ManageModel".
      operationId: DeleteFieldType
      parameters:
        - name: entityTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: fieldTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/languages:
    get:
      tags:
        - Model
      summary: Returns available languages.
      operationId: GetAllLanguages
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LanguageModel'
    post:
      tags:
        - Model
      summary: Add a Language.
      description: Requires the permission "ManageModel".
      operationId: AddLanguage
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LanguageCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LanguageCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LanguageCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LanguageCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LanguageModel'
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LanguageModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/model/languages/{languageCode}:
    delete:
      tags:
        - Model
      summary: Remove a Language.
      description: Requires the permission "ManageModel".
      operationId: DeleteLanguage
      parameters:
        - name: languageCode
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/fieldsets:
    get:
      tags:
        - Model
      summary: Returns available field sets.
      operationId: GetAllFieldSets
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldSetModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldSetModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldSetModel'
    post:
      tags:
        - Model
      summary: Add a FieldSet.
      description: Requires the permission "ManageModel".
      operationId: AddFieldSet
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/FieldSetCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/FieldSetCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/FieldSetCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/FieldSetCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldSetCreationModel'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldSetCreationModel'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldSetCreationModel'
  /api/v1.0.0/model/fieldsets/{fieldsetId}:
    put:
      tags:
        - Model
      summary: Update a FieldSet.
      description: Requires the permission "ManageModel".
      operationId: UpdateFieldSet
      parameters:
        - name: fieldsetId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateFieldSetRequestModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldSetRequestModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateFieldSetRequestModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateFieldSetRequestModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/FieldSetCreationModel'
            application/json:
              schema:
                $ref: '#/components/schemas/FieldSetCreationModel'
            text/json:
              schema:
                $ref: '#/components/schemas/FieldSetCreationModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/fieldsets/{fieldSetId}/{fieldTypeId}:
    put:
      tags:
        - Model
      summary: Add a FieldType to a FieldSet.
      description: Requires the permission "ManageModel".
      operationId: AddFieldTypeToFieldSet
      parameters:
        - name: fieldSetId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: fieldTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - Model
      summary: Remove a FieldType from a FieldSet.
      description: Requires the permission "ManageModel".
      operationId: DeleteFieldTypeFromFieldSet
      parameters:
        - name: fieldSetId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: fieldTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/fieldsets/{fieldSetId}:
    delete:
      tags:
        - Model
      summary: Delete a FieldSet.
      description: Requires the permission "ManageModel".
      operationId: DeleteFieldSet
      parameters:
        - name: fieldSetId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/category:
    get:
      tags:
        - Model
      summary: Get all Categories.
      operationId: GetAllCategories
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryModel'
    post:
      tags:
        - Model
      summary: Add a Category.
      description: Requires the permission "ManageModel".
      operationId: AddCategory
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CategoryModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CategoryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CategoryModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryModel'
  /api/v1.0.0/model/category/{categoryId}:
    get:
      tags:
        - Model
      summary: Get a Category.
      operationId: GetCategory
      parameters:
        - name: categoryId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Model
      summary: Update a Category.
      description: Requires the permission "ManageModel".
      operationId: UpdateCategory
      parameters:
        - name: categoryId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequestModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequestModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequestModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequestModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CategoryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CategoryModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Model
      summary: Delete a Category.
      description: Requires the permission "ManageModel".
      operationId: DeleteCategory
      parameters:
        - name: categoryId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/cvls:
    get:
      tags:
        - Model
      summary: Returns all CVL's
      operationId: GetAllCvls
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CVLModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CVLModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CVLModel'
    post:
      tags:
        - Model
      summary: Add a CVL.
      description: Requires the permission "ManageModel".
      operationId: AddCvl
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CVLCreationModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CVLCreationModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CVLCreationModel'
  /api/v1.0.0/model/cvls/{cvlId}:
    get:
      tags:
        - Model
      summary: Get a CVL.
      operationId: GetCvl
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CVLModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CVLModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CVLModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Model
      summary: Update a CVL.
      description: Requires the permission "ManageModel".
      operationId: UpdateCvl
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CVLCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CVLCreationModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CVLCreationModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CVLCreationModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Model
      summary: Delete a CVL.
      description: Requires the permission "ManageModel".
      operationId: DeleteCvl
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/cvls/{cvlId}/values:
    get:
      tags:
        - Model
      summary: Returns all values for a CVL
      operationId: GetAllCvlValues
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CVLValueModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CVLValueModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CVLValueModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Model
      summary: Create new CVL value
      operationId: CreateCvlValue
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
        required: true
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/cvls/{cvlId}/values/{key}:
    get:
      tags:
        - Model
      summary: Get CVL value
      operationId: GetCvlValue
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: CVL value key
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Model
      summary: Update CVL value
      operationId: UpdateCvlValue
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
          application/json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
          text/json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/CVLValueModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
            application/json:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
            text/json:
              schema:
                $ref: '#/components/schemas/CVLValueModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Model
      summary: Delete CVL value
      operationId: DeleteCvlValue
      parameters:
        - name: cvlId
          in: path
          description: ''
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: The key of the CVL value to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/specificationtemplates:
    get:
      tags:
        - Model
      summary: Returns all specification templates
      operationId: GetAllSpecificationTemplates
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySummaryModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySummaryModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntitySummaryModel'
  /api/v1.0.0/model/specificationtemplates/{templateId}/fieldtypes:
    get:
      tags:
        - Model
      summary: Returns field types for specification template
      operationId: GetSpecificationTemplatesields
      parameters:
        - name: templateId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationFieldTypeModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationFieldTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecificationFieldTypeModel'
  /api/v1.0.0/model/restrictedfields:
    get:
      tags:
        - Model
      summary: Get all RestrictedFieldPermissions.
      description: Requires the permission "ManageModel".
      operationId: GetAllRestrictedFieldPermission
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestrictedFieldPermissionModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestrictedFieldPermissionModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestrictedFieldPermissionModel'
    post:
      tags:
        - Model
      summary: Add a RestrictedFieldPermission.
      description: Requires the permission "ManageModel".
      operationId: AddRestrictedFieldPermission
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/RestrictedFieldPermissionModel'
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictedFieldPermissionModel'
          text/json:
            schema:
              $ref: '#/components/schemas/RestrictedFieldPermissionModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RestrictedFieldPermissionModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RestrictedFieldPermissionModel'
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedFieldPermissionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/RestrictedFieldPermissionModel'
  /api/v1.0.0/model/restrictedfields/{restrictedFieldId}:
    get:
      tags:
        - Model
      summary: Get a RestrictedFieldPermission.
      description: Requires the permission "ManageModel".
      operationId: GetRestrictedFieldPermission
      parameters:
        - name: restrictedFieldId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/RestrictedFieldPermissionModel'
            application/json:
              schema:
                $ref: '#/components/schemas/RestrictedFieldPermissionModel'
            text/json:
              schema:
                $ref: '#/components/schemas/RestrictedFieldPermissionModel'
    delete:
      tags:
        - Model
      summary: Delete a specific RestrictedFieldPermission.
      description: Requires the permission "ManageModel".
      operationId: DeleteRestrictedFieldPermission
      parameters:
        - name: restrictedFieldId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/restrictedfields:byfieldtype:
    delete:
      tags:
        - Model
      summary: Delete any Restriction related to a FieldType.
      description: Requires the permission "ManageModel".
      operationId: DeleteRestrictedFieldPermissionFieldType
      parameters:
        - name: fieldTypeId
          in: query
          description: ''
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/linktype:
    get:
      tags:
        - Model
      summary: Get all Link Types
      operationId: GetAllLinkTypes
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkTypeModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkTypeModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkTypeModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Model
      summary: Update Link Type
      operationId: UpdateLinkType
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Model
      summary: Add Link Type
      operationId: AddLinkType
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
          application/json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
          text/json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/LinkTypeModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/model/linktype/{linkTypeId}:
    get:
      tags:
        - Model
      summary: Get Link Type
      operationId: GetLinkType
      parameters:
        - name: linkTypeId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
            text/json:
              schema:
                $ref: '#/components/schemas/LinkTypeModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Model
      summary: Delete Link Type
      operationId: DeleteLinkType
      parameters:
        - name: linkTypeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/query:
    post:
      tags:
        - Query
      summary: Search for entity id's
      description: "Available system criterion types and their supported operators<br />\r\n-----\r\n<b>FieldSetId</b>: (string) Equal, NotEqual, IsEmpty, IsNotEmpty<br /><b>SegmentIds</b>: (Integer array) ContainsAny, NotContainsAny<br /><b>CreatedBy</b>: (email, string) Equal, NotEqual<br /><b>ModifiedBy</b>: (email, string) Equal, NotEqual<br /><b>Created</b>: (DateTime) Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual<br /><b>LastModified</b>: (DateTime) Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual<br /><b>EntityTypeId</b>: (string) Equal, NotEqual<br /><b>Completeness</b>: (Integer) Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual<br /><b>ChannelId</b>: (Integer) Equal<br /><b>PublicationId</b>: (Integer) Equal\r\nOperators for each field datatype in dataCriteria<br />\r\n-----\r\n<b>String</b>: Equal, NotEqual, BeginsWith, IsEmpty, IsNotEmpty, Contains<br /><b>LocaleString</b>: Equal, NotEqual, BeginsWith, IsEmpty, IsNotEmpty, Contains<br /><b>Boolean</b>: IsTrue, IsFalse, IsEmpty IsNotEmpty,<br /><b>CVL(singlevalue)</b>: ContainsAny, NotContainsAny, Equal, NotEqual, IsEmpty, IsNotEmpty, ContainsAll, NotContainsAll<br /><b>CVL(multivalue)</b>: ContainsAll, ContainsAny, NotContainsAll, NotContainsAny, IsEmpty IsNotEmpty,<br /><b>Date time</b>: Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, IsEmpty IsNotEmpty\r\n<br /><b>Integer and Double</b>: Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, IsEmpty, IsNotEmpty<br /><b>Xml</b>: Equal, NotEqual, BeginsWith, IsEmpty, IsNotEmpty, Contains<br /><b>File</b>: Equal, NotEqual, GreaterThan, GreaterThanOrEqual, LessThan, LessThanOrEqual, IsEmpty IsNotEmpty\r\nLanguage\r\n-----\r\n<b>LocaleString</b> is the only data type that supports language.\r\nLink Criterion<br />\r\n-----\r\n<b>DataCriteriaOperator</b> is the logical operator to combine all the given data criteria in the list.\r\nOnly \"And\" and \"Or\" operators are supported. Default value is \"And\". <br />\r\n-----\r\nDirection determines if the source or target entity of the link will be included in the result.<br />\r\n- If direction is \"outbound\", the link source entity is included in the result<br />\r\n- If direction is \"inbound\", the link target entity is included in the result<br />\r\nIf linkCriterion.dataCriteria is omitted the search will simply check if a link exists.<br />\r\nThe boolean linkExists defaults to true and may be omitted. Setting linkExists to false searches for entities\r\nwithout links and can't be combined with data criteria (in the link criterion).<br />\r\nNote: Keep your queries as simple as possible. More complex queries take longer time to perform.<br />"
      operationId: Query
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/QueryModel'
          application/json:
            schema:
              $ref: '#/components/schemas/QueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/QueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/QueryModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityListModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityListModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityListModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/syndications:
    get:
      tags:
        - Syndicate
      summary: Get All Syndications
      operationId: Syndications
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SyndicationModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SyndicationModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SyndicationModel'
  /api/v1.0.0/syndications/{syndicationId}:run:
    post:
      tags:
        - Syndicate
      summary: Run Syndicate
      operationId: RunSyndicate
      parameters:
        - name: syndicationId
          in: path
          description: Syndication Id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '429':
          description: Too Many Requests
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/imageconfigurations:
    get:
      tags:
        - System
      summary: Returns available image configurations
      operationId: GetAllImageConfigurations
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: string
            application/json:
              schema:
                type: array
                items:
                  type: string
            text/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1.0.0/system/imageconfigurationdetails:
    get:
      tags:
        - System
      summary: Return full details of available image configurations
      operationId: GetImageConfigurationDetails
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageConfigurationDetailsModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageConfigurationDetailsModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImageConfigurationDetailsModel'
  /api/v1.0.0/system/serversettings:
    get:
      tags:
        - System
      summary: Get list of server settings
      operationId: GetServerSettings
      parameters:
        - name: settingNames
          in: query
          description: optional, comma separated list of setting names
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  type: string
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
            text/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/serversetting:
    post:
      tags:
        - System
      summary: Add/Update server settings.
      description: Requires the permission "ManageServerSettings". It returns only the settings that were updated.
      operationId: UpdateServerSetting
      requestBody:
        description: The list of settings to add/update.
        content:
          application/json-patch+json:
            schema:
              type: object
              additionalProperties:
                type: string
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
          text/json:
            schema:
              type: object
              additionalProperties:
                type: string
          application/*+json:
            schema:
              type: object
              additionalProperties:
                type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: object
                additionalProperties:
                  type: string
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
            text/json:
              schema:
                type: object
                additionalProperties:
                  type: string
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/roles:
    get:
      tags:
        - System
      summary: Get list of user roles and permissions
      description: If the environment has multiple segments the user's roles for assigned segments will be combined. The /segments endpoint should be used for multi segment environments. Requires administrator role.
      operationId: Roles
      parameters:
        - name: forUsername
          in: query
          description: optional, get permissions for a specific user
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleModel'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/segments:
    get:
      tags:
        - System
      summary: Get list of segments
      description: Requires administrator role.
      operationId: Segments
      parameters:
        - name: forUsername
          in: query
          description: optional, get segments for a specific user
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SegmentModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SegmentModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SegmentModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/segments/{segmentId}:setuserroles:
    post:
      tags:
        - System
      summary: Modify user access for segment
      description: The roleNames array is expecting a list of role names, such as ["Editor", "Reader"]. The roleNames array may be set to empty or null in order to completely remove user access from the given segment. Requires administrator role.
      operationId: SetUserRolesForSegment
      parameters:
        - name: segmentId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserRolesModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRolesModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserRolesModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserRolesModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/segments/{segmentId}:adduserrole:
    post:
      tags:
        - System
      summary: Assign a role to a user and segment
      description: The roleName value expects a single role name, such as "Editor" or "Reader". Requires administrator role.
      operationId: AddUserRoleForSegment
      parameters:
        - name: segmentId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/segments/{segmentId}:removeuserrole:
    post:
      tags:
        - System
      summary: Remove a role from a user and segment
      description: The roleName value expects a single role name, such as "Editor" or "Reader". Requires administrator role.
      operationId: RemoveUserRoleForSegment
      parameters:
        - name: segmentId
          in: path
          description: ''
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserRoleModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserRolesModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '403':
          description: Forbidden
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/users:
    get:
      tags:
        - System
      summary: Get list of users
      description: Requires APIManageUsers permission.
      operationId: GetUsers
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSegmentRolesModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSegmentRolesModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSegmentRolesModel'
  /api/v1.0.0/system/users:provision:
    post:
      tags:
        - System
      summary: Provision user
      description: Provision a user account without login credentials. The provisioned account will be a Single Sign On (SSO) account. This endpoint may be used to synchronize SAML user accounts with an external system. The segmentRoles field may be omitted to provision a user without roles. Requires APIManageUsers permission.
      operationId: ProvisionUser
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/system/users/{username}:
    get:
      tags:
        - System
      summary: Get user
      description: Requires APIManageUsers permission.
      operationId: GetUser
      parameters:
        - name: username
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - System
      summary: Update user
      description: Update first name, last name and/or roles. The fields firstName, lastName or segmentRoles may be omitted to keep the current value. Requires APIManageUsers permission.
      operationId: UpdateUser
      parameters:
        - name: username
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
          application/json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
          text/json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserSegmentRolesModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
            application/json:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
            text/json:
              schema:
                $ref: '#/components/schemas/UserSegmentRolesModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - System
      summary: Delete user
      description: Requires APIManageUsers permission.
      operationId: DeleteUser
      parameters:
        - name: username
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/system/environmentcontext:
    get:
      tags:
        - System
      summary: Returns the current environment context linked to the REST API key
      operationId: GetEnvironmentContext
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EnvironmentContext'
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentContext'
            text/json:
              schema:
                $ref: '#/components/schemas/EnvironmentContext'
  /api/v1.0.0/workareafolders:
    get:
      tags:
        - Workarea
      summary: Get workarea folders
      description: The parameter includeCreatedByMe will be ignored if forUsername is set.
      operationId: WorkareaFolders
      parameters:
        - name: includeCreatedByMe
          in: query
          description: optional
          schema:
            type: boolean
            default: true
        - name: includeShared
          in: query
          description: optional
          schema:
            type: boolean
            default: true
        - name: forUsername
          in: query
          description: optional
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaFolderModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaFolderModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafolderquery:
    get:
      tags:
        - Workarea
      summary: Get all workarea folders with query
      description: "The parameter includeCreatedByMe will be ignored if forUsername is set.\r\nAdministrator permission is required for this endpoint."
      operationId: WorkareaFolderQuery
      parameters:
        - name: includeCreatedByMe
          in: query
          description: optional
          schema:
            type: boolean
            default: true
        - name: includeShared
          in: query
          description: optional
          schema:
            type: boolean
            default: false
        - name: forUsername
          in: query
          description: optional
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkAreaQueryModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkAreaQueryModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkAreaQueryModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafolderquery/{id}:
    get:
      tags:
        - Workarea
      summary: Get workarea folders with query base on id
      description: Administrator permission is required for this endpoint.
      operationId: WorkareaFolderQueryById
      parameters:
        - name: id
          in: path
          description: required
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkAreaQueryModel'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkAreaQueryModel'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkAreaQueryModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafoldertree:
    get:
      tags:
        - Workarea
      summary: Get workarea folder tree
      description: The parameter includeCreatedByMe will be ignored if forUsername is set.
      operationId: WorkareaFolderTree
      parameters:
        - name: includeCreatedByMe
          in: query
          description: optional
          schema:
            type: boolean
            default: true
        - name: includeShared
          in: query
          description: optional
          schema:
            type: boolean
            default: true
        - name: forUsername
          in: query
          description: optional
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaTreeFolderModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaTreeFolderModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaTreeFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafolder/{workareaFolderId}/entitylist:
    get:
      tags:
        - Workarea
      summary: Returns a list of entities in a workarea folder
      description: Returns an entity list for any type of workarea
      operationId: WorkareaQueryResult
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/EntityListModel'
            application/json:
              schema:
                $ref: '#/components/schemas/EntityListModel'
            text/json:
              schema:
                $ref: '#/components/schemas/EntityListModel'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '500':
          description: Server Error
  /api/v1.0.0/workareafolder/{workareaFolderId}/query:
    put:
      tags:
        - Workarea
      summary: Update workarea query
      description: Check the description for the /query endpoint on how to constuct a query.
      operationId: UpdateWorkareaQuery
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/QueryModel'
          application/json:
            schema:
              $ref: '#/components/schemas/QueryModel'
          text/json:
            schema:
              $ref: '#/components/schemas/QueryModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/QueryModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            text/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  /api/v1.0.0/workareafolder/{workareaFolderId}/entityIds:
    get:
      tags:
        - Workarea
      summary: Get entity id's in a static workarea
      description: ''
      operationId: WorkareaFolderEntityIds
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            text/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Workarea
      summary: Set entity id's in a static workarea
      description: ''
      operationId: SetWorkareaFolderEntityIds
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          text/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
          application/*+json:
            schema:
              type: array
              items:
                type: integer
                format: int32
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            application/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
            text/json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafolder/{workareaFolderId}:
    put:
      tags:
        - Workarea
      summary: Update workarea folder
      description: It's only possible to alter name and index properties
      operationId: UpdateWorkarea
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkareaFolderModel'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkareaFolderModel'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkareaFolderModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkareaFolderModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Workarea
      summary: Delete workarea folder
      description: ''
      operationId: DeleteWorkarea
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafolder:createnew:
    post:
      tags:
        - Workarea
      summary: Create a new workarea
      description: "Supply either entityIds or query. This determines if the workarea is static or based on a query.\r\nCheck the description for the /query endpoint on how to constuct a query."
      operationId: CreateWorkarea
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkareaCreationModel'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkareaCreationModel'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkareaCreationModel'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkareaCreationModel'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafolder/topnode:
    get:
      tags:
        - Workarea
      summary: Get all workarea top nodes
      description: ''
      operationId: WorkAreaTopNode
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaFolderModel'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaFolderModel'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkareaFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - Workarea
      summary: Create a top node workarea
      description: Top nodes are not query workarea. This will be available under the Shared Workarea.
      operationId: CreateTopNodeWorkArea
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/v1.0.0/workareafolder/topnode/{workareaFolderId}:
    get:
      tags:
        - Workarea
      summary: Get workarea top node by workarea id
      description: ''
      operationId: WorkAreaTopNodeById
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
        - Workarea
      summary: Update a top node workarea
      description: "Top nodes are not query workarea. This will be available under the Shared Workarea.\r\nProperties that are not provided will not be modified."
      operationId: UpdateTopNodeWorkArea
      parameters:
        - name: workareaFolderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
          text/json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
          application/*+json:
            schema:
              $ref: '#/components/schemas/WorkareaTopNodeRequest'
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            application/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
            text/json:
              schema:
                $ref: '#/components/schemas/WorkareaFolderModel'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - Workarea
      summary: Delete workarea top node by workarea id
      description: ''
      operationId: DeleteWorkAreaTopNodeById
      parameters:
        - name: workareaFolderId
          in: path
          description: ''
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    Base64FileModel:
      type: object
      properties:
        fileName:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
      additionalProperties: false
    Base64FileModelWithLink:
      type: object
      properties:
        fileName:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        resourceLink:
          $ref: '#/components/schemas/ResourceLinkModel'
      additionalProperties: false
    CVLCreationModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
        dataType:
          type: string
          default: String
          nullable: true
        customValueList:
          type: boolean
          default: false
      additionalProperties: false
    CVLModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        customValueList:
          type: boolean
      additionalProperties: false
    CVLValueModel:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          nullable: true
        index:
          type: integer
          format: int32
        parentKey:
          type: string
          nullable: true
        deactivated:
          type: boolean
      additionalProperties: false
    Calendar:
      type: object
      properties:
        minSupportedDateTime:
          type: string
          format: date-time
          readOnly: true
        maxSupportedDateTime:
          type: string
          format: date-time
          readOnly: true
        algorithmType:
          $ref: '#/components/schemas/CalendarAlgorithmType'
        isReadOnly:
          type: boolean
          readOnly: true
        eras:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
          readOnly: true
        twoDigitYearMax:
          type: integer
          format: int32
      additionalProperties: false
    CalendarAlgorithmType:
      enum:
        - 0
        - 1
        - 2
        - 3
      type: integer
      format: int32
    CalendarWeekRule:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    CategoryModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        index:
          type: integer
          format: int32
      additionalProperties: false
    ChannelJobModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        channelId:
          type: integer
          format: int32
        state:
          type: string
          nullable: true
        dateStarted:
          type: string
          nullable: true
        dateCompleted:
          type: string
          nullable: true
        metadata:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
      additionalProperties: false
    ChannelMessageModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        method:
          type: string
          nullable: true
        message:
          $ref: '#/components/schemas/ChannelQueueMessage'
        status:
          type: string
          nullable: true
        modified:
          type: string
          format: date-time
        added:
          type: string
          format: date-time
      additionalProperties: false
    ChannelPathContentModel:
      type: object
      properties:
        entityList:
          $ref: '#/components/schemas/EntityListModel'
        content:
          type: array
          items:
            $ref: '#/components/schemas/StructureEntityModel'
          nullable: true
      additionalProperties: false
    ChannelQueueMessage:
      type: object
      properties:
        id:
          type: integer
          format: int32
        entityId:
          type: integer
          format: int32
          nullable: true
        entityTypeId:
          type: string
          nullable: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
          nullable: true
        link:
          $ref: '#/components/schemas/DtoLink'
        method:
          type: string
          nullable: true
        xml:
          type: string
          nullable: true
        data:
          nullable: true
      additionalProperties: false
    ChannelSummaryModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        displayName:
          type: string
          nullable: true
        displayDescription:
          type: string
          nullable: true
        entityTypeId:
          type: string
          nullable: true
        createdDate:
          type: string
          nullable: true
        modifiedDate:
          type: string
          nullable: true
        isPublished:
          type: boolean
      additionalProperties: false
    CommentModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        text:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
        createdDate:
          type: string
          nullable: true
        formattedCreatedDate:
          type: string
          nullable: true
        entityId:
          type: integer
          format: int32
      additionalProperties: false
    CompareInfo:
      type: object
      properties:
        name:
          type: string
          nullable: true
          readOnly: true
        version:
          $ref: '#/components/schemas/SortVersion'
        lcid:
          type: integer
          format: int32
          readOnly: true
      additionalProperties: false
    CompletenessDetailsModel:
      type: object
      properties:
        completeness:
          type: integer
          format: int32
          nullable: true
        groups:
          type: array
          items:
            $ref: '#/components/schemas/CompletenessGroupDetailsModel'
          nullable: true
      additionalProperties: false
    CompletenessGroupDetailsModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        isCompleted:
          type: boolean
        rules:
          type: array
          items:
            $ref: '#/components/schemas/CompletenessRuleDetailModel'
          nullable: true
      additionalProperties: false
    CompletenessRuleDetailModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        isCompleted:
          type: boolean
      additionalProperties: false
    ConnectEventFilterConfigurationModel:
      type: object
      properties:
        filterType:
          type: string
          nullable: true
        configuration:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ConnectEventFilterTypeModel:
      type: object
      properties:
        filterTypeName:
          type: string
          nullable: true
        availableFilterValues:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    ConnectMessageModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        action:
          type: string
          nullable: true
        status:
          type: string
          nullable: true
        message:
          type: string
          nullable: true
        modified:
          type: string
          format: date-time
        added:
          type: string
          format: date-time
        username:
          type: string
          nullable: true
        extensionId:
          type: string
          nullable: true
      additionalProperties: false
    ConnectorStateModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        connectorId:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
      additionalProperties: false
      description: ''
    CultureInfo:
      type: object
      properties:
        parent:
          $ref: '#/components/schemas/CultureInfo'
        lcid:
          type: integer
          format: int32
          readOnly: true
        keyboardLayoutId:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
          nullable: true
        ietfLanguageTag:
          type: string
          nullable: true
          readOnly: true
        displayName:
          type: string
          nullable: true
          readOnly: true
        nativeName:
          type: string
          nullable: true
          readOnly: true
        englishName:
          type: string
          nullable: true
          readOnly: true
        twoLetterISOLanguageName:
          type: string
          nullable: true
          readOnly: true
        threeLetterISOLanguageName:
          type: string
          nullable: true
          readOnly: true
        threeLetterWindowsLanguageName:
          type: string
          nullable: true
          readOnly: true
        compareInfo:
          $ref: '#/components/schemas/CompareInfo'
        textInfo:
          $ref: '#/components/schemas/TextInfo'
        isNeutralCulture:
          type: boolean
          readOnly: true
        cultureTypes:
          $ref: '#/components/schemas/CultureTypes'
        numberFormat:
          $ref: '#/components/schemas/NumberFormatInfo'
        dateTimeFormat:
          $ref: '#/components/schemas/DateTimeFormatInfo'
        calendar:
          $ref: '#/components/schemas/Calendar'
        optionalCalendars:
          type: array
          items:
            $ref: '#/components/schemas/Calendar'
          nullable: true
          readOnly: true
        useUserOverride:
          type: boolean
          readOnly: true
        isReadOnly:
          type: boolean
          readOnly: true
      additionalProperties: false
    CultureTypes:
      enum:
        - 1
        - 2
        - 4
        - 7
        - 8
        - 16
        - 32
        - 64
      type: integer
      format: int32
    DataCriterionModel:
      type: object
      properties:
        fieldTypeId:
          type: string
          nullable: true
        value:
          nullable: true
        language:
          type: string
          nullable: true
        operator:
          type: string
          nullable: true
      additionalProperties: false
    DateTimeFormatInfo:
      type: object
      properties:
        amDesignator:
          type: string
          nullable: true
        calendar:
          $ref: '#/components/schemas/Calendar'
        dateSeparator:
          type: string
          nullable: true
        firstDayOfWeek:
          $ref: '#/components/schemas/DayOfWeek'
        calendarWeekRule:
          $ref: '#/components/schemas/CalendarWeekRule'
        fullDateTimePattern:
          type: string
          nullable: true
        longDatePattern:
          type: string
          nullable: true
        longTimePattern:
          type: string
          nullable: true
        monthDayPattern:
          type: string
          nullable: true
        pmDesignator:
          type: string
          nullable: true
        rfC1123Pattern:
          type: string
          nullable: true
          readOnly: true
        shortDatePattern:
          type: string
          nullable: true
        shortTimePattern:
          type: string
          nullable: true
        sortableDateTimePattern:
          type: string
          nullable: true
          readOnly: true
        timeSeparator:
          type: string
          nullable: true
        universalSortableDateTimePattern:
          type: string
          nullable: true
          readOnly: true
        yearMonthPattern:
          type: string
          nullable: true
        abbreviatedDayNames:
          type: array
          items:
            type: string
          nullable: true
        shortestDayNames:
          type: array
          items:
            type: string
          nullable: true
        dayNames:
          type: array
          items:
            type: string
          nullable: true
        abbreviatedMonthNames:
          type: array
          items:
            type: string
          nullable: true
        monthNames:
          type: array
          items:
            type: string
          nullable: true
        isReadOnly:
          type: boolean
          readOnly: true
        nativeCalendarName:
          type: string
          nullable: true
          readOnly: true
        abbreviatedMonthGenitiveNames:
          type: array
          items:
            type: string
          nullable: true
        monthGenitiveNames:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    DayOfWeek:
      enum:
        - 0
        - 1
        - 2
        - 3
        - 4
        - 5
        - 6
      type: integer
      format: int32
    DigitShapes:
      enum:
        - 0
        - 1
        - 2
      type: integer
      format: int32
    DtoEntity:
      type: object
      properties:
        id:
          type: integer
          format: int32
        version:
          type: integer
          format: int32
        changeSet:
          type: integer
          format: int32
        entityTypeId:
          type: string
          nullable: true
        locked:
          type: string
          nullable: true
        dateCreated:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        modifiedBy:
          type: string
          nullable: true
        fieldSetId:
          type: string
          nullable: true
        lastModified:
          type: string
          nullable: true
        mainPictureId:
          type: integer
          format: int32
          nullable: true
        mainPictureUrl:
          type: string
          nullable: true
        completeness:
          type: integer
          format: int32
          nullable: true
        loadLevel:
          $ref: '#/components/schemas/LoadLevel'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/DtoField'
          nullable: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/DtoLink'
          nullable: true
        displayName:
          $ref: '#/components/schemas/DtoField'
        displayDescription:
          $ref: '#/components/schemas/DtoField'
        segment:
          $ref: '#/components/schemas/DtoSegment'
      additionalProperties: false
    DtoField:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        fieldTypeId:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        revision:
          type: integer
          format: int32
        lastModified:
          type: string
          nullable: true
        data:
          type: string
          nullable: true
      additionalProperties: false
    DtoLink:
      type: object
      properties:
        id:
          type: integer
          format: int32
        linkTypeId:
          type: string
          nullable: true
        source:
          $ref: '#/components/schemas/DtoEntity'
        target:
          $ref: '#/components/schemas/DtoEntity'
        linkEntity:
          $ref: '#/components/schemas/DtoEntity'
        index:
          type: integer
          format: int32
        linkTypeIndex:
          type: integer
          format: int32
        inactive:
          type: boolean
        lastModified:
          type: string
          format: date-time
      additionalProperties: false
    DtoSegment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    EntityBundleModel:
      type: object
      properties:
        linkTypeId:
          type: string
          nullable: true
        linkIndex:
          type: integer
          format: int32
          nullable: true
        summary:
          $ref: '#/components/schemas/EntitySummaryModel'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldSummaryModel'
          nullable: true
        specification:
          type: array
          items:
            $ref: '#/components/schemas/SpecificationValueSummaryModel'
          nullable: true
        outbound:
          type: array
          items:
            $ref: '#/components/schemas/EntityBundleModel'
          nullable: true
        inbound:
          type: array
          items:
            $ref: '#/components/schemas/EntityBundleModel'
          nullable: true
        linkEntity:
          $ref: '#/components/schemas/EntityBundleModel'
      additionalProperties: false
    EntityCreationModel:
      type: object
      properties:
        entityTypeId:
          type: string
          nullable: true
        fieldSetId:
          type: string
          nullable: true
        fieldValues:
          type: array
          items:
            $ref: '#/components/schemas/FieldValueModel'
          nullable: true
        segmentId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    EntityDataModel:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        linkTypeId:
          type: string
          nullable: true
        linkIndex:
          type: integer
          format: int32
          nullable: true
        linkEntity:
          $ref: '#/components/schemas/EntityDataModel'
        summary:
          $ref: '#/components/schemas/EntitySummaryModel'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldSummaryModel'
          nullable: true
        fieldValues:
          type: array
          items:
            $ref: '#/components/schemas/FieldValueModel'
          nullable: true
        specification:
          type: array
          items:
            $ref: '#/components/schemas/SpecificationValueSummaryModel'
          nullable: true
        specificationValues:
          type: array
          items:
            $ref: '#/components/schemas/SpecificationValueModel'
          nullable: true
        media:
          type: array
          items:
            type: string
          nullable: true
        mediaDetails:
          type: array
          items:
            $ref: '#/components/schemas/MediaInfoModel'
          nullable: true
        inbound:
          type: array
          items:
            $ref: '#/components/schemas/EntityDataModel'
          nullable: true
        outbound:
          type: array
          items:
            $ref: '#/components/schemas/EntityDataModel'
          nullable: true
      additionalProperties: false
    EntityListModel:
      type: object
      properties:
        count:
          type: integer
          format: int32
        entityIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false
    EntitySummaryModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        displayName:
          type: string
          nullable: true
        displayDescription:
          type: string
          nullable: true
        version:
          type: string
          nullable: true
        lockedBy:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
        createdDate:
          type: string
          nullable: true
        formattedCreatedDate:
          type: string
          nullable: true
        modifiedBy:
          type: string
          nullable: true
        modifiedDate:
          type: string
          nullable: true
        formattedModifiedDate:
          type: string
          nullable: true
        resourceUrl:
          type: string
          nullable: true
        entityTypeId:
          type: string
          nullable: true
        entityTypeDisplayName:
          type: string
          nullable: true
        completeness:
          type: integer
          format: int32
          nullable: true
        fieldSetId:
          type: string
          nullable: true
        fieldSetName:
          type: string
          nullable: true
        segmentId:
          type: integer
          format: int32
        segmentName:
          type: string
          nullable: true
      additionalProperties: false
    EntityTypeCreationModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        isLinkEntityType:
          type: boolean
          default: false
      additionalProperties: false
    EntityTypeModelV2:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        fieldTypes:
          type: array
          items:
            type: string
          nullable: true
        inboundLinkTypes:
          type: array
          items:
            type: string
          nullable: true
        outboundLinkTypes:
          type: array
          items:
            type: string
          nullable: true
        isLinkEntityType:
          type: boolean
        fieldSetIds:
          type: array
          items:
            type: string
          nullable: true
        displayNameFieldTypeId:
          type: string
          nullable: true
        displayDescriptionFieldTypeId:
          type: string
          nullable: true
      additionalProperties: false
    EntityUpsertDataModel:
      type: object
      properties:
        entityTypeId:
          type: string
          nullable: true
        keyFieldTypeIds:
          type: array
          items:
            type: string
          nullable: true
        fieldValues:
          type: array
          items:
            type: array
            items: {}
          nullable: true
        fieldSetOptions:
          $ref: '#/components/schemas/SetFieldSetModel'
        specificationData:
          $ref: '#/components/schemas/SpecificationUpsertModel'
        segment:
          nullable: true
        segmentId:
          type: integer
          format: int32
          nullable: true
          readOnly: true
          deprecated: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkedEntitiesUpsertDataModel'
          nullable: true
      additionalProperties: false
    EnvironmentContext:
      type: object
      properties:
        customerSafeName:
          type: string
          nullable: true
        environmentSafeName:
          type: string
          nullable: true
      additionalProperties: false
    ExeternalUrlFileModel:
      type: object
      properties:
        url:
          type: string
          nullable: true
        overrideUrlFileName:
          type: string
          nullable: true
      additionalProperties: false
    ExtensionApiKeyModel:
      type: object
      properties:
        apiKey:
          type: string
          nullable: true
      additionalProperties: false
    ExtensionCreationModel:
      type: object
      properties:
        assemblyName:
          type: string
          nullable: true
        assemblyType:
          type: string
          nullable: true
        extensionId:
          type: string
          nullable: true
        extensionType:
          type: string
          nullable: true
        packageId:
          type: integer
          format: int32
        isEnabled:
          type: boolean
        extensionDescription:
          type: string
          nullable: true
      additionalProperties: false
    ExtensionModel:
      type: object
      properties:
        extensionId:
          type: string
          nullable: true
        extensionType:
          type: string
          nullable: true
        assemblyName:
          type: string
          nullable: true
        assemblyType:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ExtensionStatusModel'
        package:
          $ref: '#/components/schemas/PackageModel'
        extensionDescription:
          type: string
          nullable: true
      additionalProperties: false
    ExtensionSettingModel:
      type: object
      properties:
        key:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
      additionalProperties: false
    ExtensionStatusModel:
      type: object
      properties:
        isEnabled:
          type: boolean
        isPaused:
          type: boolean
      additionalProperties: false
    ExternalUrlFileModelWithLink:
      type: object
      properties:
        url:
          type: string
          nullable: true
        overrideUrlFileName:
          type: string
          nullable: true
        resourceLink:
          $ref: '#/components/schemas/ResourceLinkModel'
      additionalProperties: false
    FetchLinkObjectsModel:
      type: object
      properties:
        linkTypeIds:
          type: string
          nullable: true
        objects:
          type: string
          nullable: true
        linkEntityObjects:
          type: string
          nullable: true
      additionalProperties: false
    FetchObjectsModel:
      type: object
      properties:
        entityIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        objects:
          type: string
          nullable: true
        fieldTypeIds:
          type: string
          nullable: true
        inbound:
          $ref: '#/components/schemas/FetchLinkObjectsModel'
        outbound:
          $ref: '#/components/schemas/FetchLinkObjectsModel'
      additionalProperties: false
    Field:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        fieldType:
          $ref: '#/components/schemas/FieldType'
        data:
          nullable: true
        revision:
          type: integer
          format: int32
        lastModified:
          type: string
          format: date-time
      additionalProperties: false
    FieldRevisionModel:
      type: object
      properties:
        fieldTypeId:
          type: string
          nullable: true
        value:
          nullable: true
        language:
          type: string
          nullable: true
        revision:
          type: integer
          format: int32
        modifiedBy:
          type: string
          nullable: true
        modifiedDate:
          type: string
          nullable: true
        formattedModifiedDate:
          type: string
          nullable: true
        entityId:
          type: integer
          format: int32
      additionalProperties: false
    FieldSetCreationModel:
      type: object
      properties:
        fieldSetId:
          type: string
          nullable: true
        name:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        description:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        entityTypeId:
          type: string
          nullable: true
        fieldTypeIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FieldSetModel:
      type: object
      properties:
        fieldSetId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        entityTypeId:
          type: string
          nullable: true
        fieldTypeIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    FieldSummaryModel:
      type: object
      properties:
        fieldTypeId:
          type: string
          nullable: true
        entityId:
          type: integer
          format: int32
        fieldTypeDisplayName:
          type: string
          nullable: true
        fieldTypeDescription:
          type: string
          nullable: true
        fieldDataType:
          type: string
          nullable: true
        value:
          nullable: true
        displayValue:
          nullable: true
        isMultiValue:
          type: boolean
        isHidden:
          type: boolean
        isReadOnly:
          type: boolean
        isMandatory:
          type: boolean
        isUnique:
          type: boolean
        isExcludedFromDefaultView:
          type: boolean
        includedInFieldSets:
          type: array
          items:
            type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
        categoryName:
          type: string
          nullable: true
        index:
          type: integer
          format: int32
        revision:
          type: integer
          format: int32
        cvlId:
          type: string
          nullable: true
        parentCvlId:
          type: string
          nullable: true
        settings:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
      additionalProperties: false
    FieldType:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          $ref: '#/components/schemas/LocaleString'
        description:
          $ref: '#/components/schemas/LocaleString'
        entityTypeId:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        mandatory:
          type: boolean
        unique:
          type: boolean
        index:
          type: integer
          format: int32
        categoryId:
          type: string
          nullable: true
        defaultValue:
          type: string
          nullable: true
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
          nullable: true
        hidden:
          type: boolean
        readOnly:
          type: boolean
        isDisplayName:
          type: boolean
        isDisplayDescription:
          type: boolean
        settings:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        excludeFromDefaultView:
          type: boolean
        cvlId:
          type: string
          nullable: true
        multivalue:
          type: boolean
        trackChanges:
          type: boolean
        expressionSupport:
          type: boolean
      additionalProperties: false
    FieldTypeModelV2:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        localizedName:
          type: string
          nullable: true
        description:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        localizedDescription:
          type: string
          nullable: true
        dataType:
          type: string
          nullable: true
        isMultiValue:
          type: boolean
          default: false
        isHidden:
          type: boolean
          default: false
        isReadOnly:
          type: boolean
          default: false
        isMandatory:
          type: boolean
          default: false
        isUnique:
          type: boolean
          default: false
        trackChanges:
          type: boolean
          default: false
        defaultValue:
          type: string
          nullable: true
        isExcludedFromDefaultView:
          type: boolean
          default: false
        includedInFieldSets:
          type: array
          items:
            type: string
          nullable: true
        categoryId:
          type: string
          default: General
          nullable: true
        index:
          type: integer
          format: int32
        cvlId:
          type: string
          nullable: true
        parentCvlId:
          type: string
          nullable: true
        settings:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        expressionSupport:
          type: boolean
          default: false
          nullable: true
      additionalProperties: false
    FieldValueModel:
      type: object
      properties:
        fieldTypeId:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    HtmlTemplateCreationModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        localizedName:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        templateType:
          type: string
          nullable: true
        content:
          type: string
          nullable: true
        properties:
          type: string
          nullable: true
      additionalProperties: false
    HtmlTemplateModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        localizedName:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        templateType:
          type: string
          nullable: true
        content:
          type: string
          nullable: true
        properties:
          type: string
          nullable: true
      additionalProperties: false
    ImageConfigurationDetailsModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        extension:
          type: string
          nullable: true
        outputExtension:
          type: string
          nullable: true
        arguments:
          type: string
          nullable: true
      additionalProperties: false
    LanguageCreationModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
      additionalProperties: false
    LanguageModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
      additionalProperties: false
    LinkCriterionModel:
      type: object
      properties:
        linkTypeId:
          type: string
          nullable: true
        direction:
          type: string
          nullable: true
        linkExists:
          type: boolean
          nullable: true
        dataCriteria:
          type: array
          items:
            $ref: '#/components/schemas/DataCriterionModel'
          nullable: true
      additionalProperties: false
    LinkModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        isActive:
          type: boolean
        linkTypeId:
          type: string
          nullable: true
        sourceEntityId:
          type: integer
          format: int32
        targetEntityId:
          type: integer
          format: int32
        linkEntityId:
          type: integer
          format: int32
          default: null
          nullable: true
        index:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    LinkRuleDefinitionCreationModel:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        linkTypeId:
          type: string
          nullable: true
        operator:
          type: string
          nullable: true
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LinkRuleModel'
          nullable: true
        queries:
          type: array
          items:
            $ref: '#/components/schemas/LinkRuleQueryModel'
          nullable: true
      additionalProperties: false
    LinkRuleDefinitionModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        entityId:
          type: integer
          format: int32
        linkTypeId:
          type: string
          nullable: true
        operator:
          type: string
          nullable: true
        disabled:
          type: boolean
        rules:
          type: array
          items:
            $ref: '#/components/schemas/LinkRuleModel'
          nullable: true
        queries:
          type: array
          items:
            $ref: '#/components/schemas/LinkRuleQueryModel'
          nullable: true
      additionalProperties: false
    LinkRuleModel:
      type: object
      properties:
        ruleDefinitionId:
          type: integer
          format: int32
        fieldTypeId:
          type: string
          nullable: true
        value:
          type: string
          nullable: true
        operator:
          type: string
          nullable: true
        ruleLanguage:
          type: string
          nullable: true
      additionalProperties: false
    LinkRuleQueryModel:
      type: object
      properties:
        ruleDefinitionId:
          type: integer
          format: int32
        workAreaId:
          type: string
          nullable: true
      additionalProperties: false
    LinkTypeModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        sourceEntityTypeId:
          type: string
          nullable: true
        sourceName:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        targetEntityTypeId:
          type: string
          nullable: true
        targetName:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        linkEntityTypeId:
          type: string
          nullable: true
        index:
          type: integer
          format: int32
      additionalProperties: false
    LinkedEntitiesUpsertDataModel:
      type: object
      properties:
        linkTypeId:
          type: string
          nullable: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/EntityUpsertDataModel'
          nullable: true
        linkInsertAction:
          type: string
          nullable: true
        linkUpdateAction:
          type: string
          nullable: true
        staleLinkAction:
          type: string
          nullable: true
      additionalProperties: false
    LoadLevel:
      enum:
        - 1
        - 2
        - 4
      type: integer
      format: int32
    LocaleString:
      type: object
      properties:
        languages:
          type: array
          items:
            $ref: '#/components/schemas/CultureInfo'
          nullable: true
      additionalProperties: false
    MapUniqueValuesModel:
      type: object
      properties:
        fieldTypeId:
          type: string
          nullable: true
        uniqueValues:
          type: array
          items: {}
          nullable: true
      additionalProperties: false
    MediaInfoModel:
      type: object
      properties:
        fileId:
          type: integer
          format: int32
          nullable: true
        url:
          type: string
          nullable: true
        fileName:
          type: string
          nullable: true
        extension:
          type: string
          nullable: true
        fileSize:
          type: integer
          format: int64
          nullable: true
        dateCreated:
          type: string
          nullable: true
        lastModified:
          type: string
          nullable: true
        entityId:
          type: integer
          format: int32
      additionalProperties: false
    NumberFormatInfo:
      type: object
      properties:
        currencyDecimalDigits:
          type: integer
          format: int32
        currencyDecimalSeparator:
          type: string
          nullable: true
        isReadOnly:
          type: boolean
          readOnly: true
        currencyGroupSizes:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        numberGroupSizes:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        percentGroupSizes:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        currencyGroupSeparator:
          type: string
          nullable: true
        currencySymbol:
          type: string
          nullable: true
        naNSymbol:
          type: string
          nullable: true
        currencyNegativePattern:
          type: integer
          format: int32
        numberNegativePattern:
          type: integer
          format: int32
        percentPositivePattern:
          type: integer
          format: int32
        percentNegativePattern:
          type: integer
          format: int32
        negativeInfinitySymbol:
          type: string
          nullable: true
        negativeSign:
          type: string
          nullable: true
        numberDecimalDigits:
          type: integer
          format: int32
        numberDecimalSeparator:
          type: string
          nullable: true
        numberGroupSeparator:
          type: string
          nullable: true
        currencyPositivePattern:
          type: integer
          format: int32
        positiveInfinitySymbol:
          type: string
          nullable: true
        positiveSign:
          type: string
          nullable: true
        percentDecimalDigits:
          type: integer
          format: int32
        percentDecimalSeparator:
          type: string
          nullable: true
        percentGroupSeparator:
          type: string
          nullable: true
        percentSymbol:
          type: string
          nullable: true
        perMilleSymbol:
          type: string
          nullable: true
        nativeDigits:
          type: array
          items:
            type: string
          nullable: true
        digitSubstitution:
          $ref: '#/components/schemas/DigitShapes'
      additionalProperties: false
    PackageModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        createdDate:
          type: string
          nullable: true
        modifiedDate:
          type: string
          nullable: true
        fileName:
          type: string
          nullable: true
        version:
          type: integer
          format: int32
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    QueryModel:
      type: object
      properties:
        systemCriteria:
          type: array
          items:
            $ref: '#/components/schemas/SystemCriterionModel'
          nullable: true
        dataCriteria:
          type: array
          items:
            $ref: '#/components/schemas/DataCriterionModel'
          nullable: true
        linkCriterion:
          $ref: '#/components/schemas/LinkCriterionModel'
        dataCriteriaOperator:
          type: string
          description: Default value is "And". Accepts only "And" and "Or".
          nullable: true
      additionalProperties: false
    ResourceLinkModel:
      type: object
      properties:
        sourceEntityId:
          type: integer
          format: int32
        linkTypeId:
          type: string
          nullable: true
      additionalProperties: false
    RestrictedFieldPermissionModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        entityTypeId:
          type: string
          nullable: true
        fieldTypeId:
          type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
        restrictionType:
          type: string
          default: Readonly
          nullable: true
        roleId:
          type: integer
          format: int32
      additionalProperties: false
    RoleModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        permissions:
          type: array
          items: {}
          nullable: true
      additionalProperties: false
    RunningExtensionModel:
      type: object
      properties:
        isRunning:
          type: boolean
          description: If the extension is running
      additionalProperties: false
      description: Model for running extension
    Segment:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      additionalProperties: false
    SegmentModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleModel'
          nullable: true
      additionalProperties: false
    SegmentRoleNamesModel:
      type: object
      properties:
        segmentId:
          type: integer
          format: int32
        roleNames:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    SetFieldSetModel:
      type: object
      properties:
        fieldSetId:
          type: string
          nullable: true
        wipeOtherFields:
          type: boolean
      additionalProperties: false
    SetSegmentModel:
      type: object
      properties:
        segmentId:
          type: integer
          format: int32
      additionalProperties: false
    SetSpecificationTemplateModel:
      type: object
      properties:
        specificationId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    SortVersion:
      type: object
      properties:
        fullVersion:
          type: integer
          format: int32
        sortId:
          type: string
          format: uuid
      additionalProperties: false
    SpecificationFieldTypeModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        dataType:
          type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
        defaultValue:
          type: string
          nullable: true
        format:
          type: string
          nullable: true
        unit:
          type: string
          nullable: true
        isDisabled:
          type: boolean
        isMultiValue:
          type: boolean
        isMandatory:
          type: boolean
        index:
          type: integer
          format: int32
        cvlId:
          type: string
          nullable: true
      additionalProperties: false
    SpecificationUpsertModel:
      type: object
      properties:
        specification:
          nullable: true
        specificationValues:
          type: array
          items:
            type: array
            items: {}
          nullable: true
      additionalProperties: false
    SpecificationValueModel:
      type: object
      properties:
        specificationFieldTypeId:
          type: string
          nullable: true
        value:
          nullable: true
      additionalProperties: false
    SpecificationValueSummaryModel:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        additionalData:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        categoryId:
          type: string
          nullable: true
        value:
          nullable: true
        displayValue:
          nullable: true
        parentCvlId:
          type: string
          nullable: true
        cvlId:
          type: string
          nullable: true
        isMultiValue:
          type: boolean
        index:
          type: integer
          format: int32
        isFormatted:
          type: boolean
        specificationFieldTypeId:
          type: string
          nullable: true
        unit:
          type: string
          nullable: true
        specificationDataType:
          type: string
          nullable: true
        mandatory:
          type: boolean
        isHidden:
          type: boolean
        isReadOnly:
          type: boolean
      additionalProperties: false
    StructureEntityModel:
      type: object
      properties:
        entityId:
          type: integer
          format: int32
        entityTypeId:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        sortOrder:
          type: integer
          format: int32
        path:
          type: string
          nullable: true
        linkEntityId:
          type: integer
          format: int32
          nullable: true
        linkTypeIdFromParent:
          type: string
          nullable: true
      additionalProperties: false
    StructureNode:
      type: object
      properties:
        path:
          type: string
          nullable: true
        nodes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/StructureNode'
          nullable: true
      additionalProperties: false
    SyndicationModel:
      type: object
      properties:
        extensionDisplayName:
          type: string
          nullable: true
        extensionId:
          type: string
          nullable: true
        id:
          type: integer
          format: int32
        mappingName:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        outputFormat:
          type: string
          nullable: true
        workareaName:
          type: string
          nullable: true
        workareaId:
          type: string
          nullable: true
      additionalProperties: false
    SystemCriterionModel:
      type: object
      properties:
        type:
          type: string
          nullable: true
        value:
          nullable: true
        operator:
          type: string
          nullable: true
      additionalProperties: false
    TextInfo:
      type: object
      properties:
        ansiCodePage:
          type: integer
          format: int32
          readOnly: true
        oemCodePage:
          type: integer
          format: int32
          readOnly: true
        macCodePage:
          type: integer
          format: int32
          readOnly: true
        ebcdicCodePage:
          type: integer
          format: int32
          readOnly: true
        lcid:
          type: integer
          format: int32
          readOnly: true
        cultureName:
          type: string
          nullable: true
          readOnly: true
        isReadOnly:
          type: boolean
          readOnly: true
        listSeparator:
          type: string
          nullable: true
        isRightToLeft:
          type: boolean
          readOnly: true
      additionalProperties: false
    Unit:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          $ref: '#/components/schemas/LocaleString'
      additionalProperties: false
    UpdateCategoryRequestModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
          deprecated: true
        name:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        index:
          type: integer
          format: int32
      additionalProperties: false
    UpdateFieldSetRequestModel:
      type: object
      properties:
        fieldSetId:
          type: string
          nullable: true
          deprecated: true
        name:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        description:
          type: object
          additionalProperties:
            type: string
            nullable: true
          nullable: true
        entityTypeId:
          type: string
          nullable: true
        fieldTypeIds:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    UpsertResponseModel:
      type: object
      properties:
        errorCount:
          type: integer
          format: int32
          readOnly: true
        errors:
          type: array
          items:
            type: array
            items:
              type: string
          nullable: true
          readOnly: true
        insertedEntities:
          type: array
          items:
            type: array
            items: {}
          nullable: true
          readOnly: true
        updatedEntities:
          type: array
          items:
            type: array
            items: {}
          nullable: true
          readOnly: true
        deletedEntities:
          type: array
          items:
            type: array
            items: {}
          nullable: true
          readOnly: true
      additionalProperties: false
    UrlFileModel:
      type: object
      properties:
        url:
          type: string
          nullable: true
        overrideUrlFileName:
          type: string
          nullable: true
      additionalProperties: false
    UrlFileModelWithLink:
      type: object
      properties:
        url:
          type: string
          nullable: true
        overrideUrlFileName:
          type: string
          nullable: true
        resourceLink:
          $ref: '#/components/schemas/ResourceLinkModel'
      additionalProperties: false
    UserRoleModel:
      type: object
      properties:
        username:
          type: string
          nullable: true
        roleName:
          type: string
          nullable: true
      additionalProperties: false
    UserRolesModel:
      type: object
      properties:
        username:
          type: string
          nullable: true
        roleNames:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    UserSegmentRolesModel:
      type: object
      properties:
        username:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        segmentRoles:
          type: array
          items:
            $ref: '#/components/schemas/SegmentRoleNamesModel'
          nullable: true
      additionalProperties: false
    WorkAreaQueryModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        parentId:
          type: string
          format: uuid
          nullable: true
        isQuery:
          type: boolean
        query:
          $ref: '#/components/schemas/QueryModel'
        index:
          type: integer
          format: int32
      additionalProperties: false
    WorkareaCreationModel:
      type: object
      properties:
        name:
          type: string
          nullable: true
        isShared:
          type: boolean
        query:
          $ref: '#/components/schemas/QueryModel'
        entityIds:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        index:
          type: integer
          format: int32
        parentId:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
      additionalProperties: false
    WorkareaFolderModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        isQuery:
          type: boolean
        isWorkflowQuery:
          type: boolean
        index:
          type: integer
          format: int32
      additionalProperties: false
    WorkareaTopNodeRequest:
      type: object
      properties:
        name:
          type: string
          nullable: true
        index:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    WorkareaTreeFolderModel:
      type: object
      properties:
        id:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        isQuery:
          type: boolean
        folders:
          type: array
          items:
            $ref: '#/components/schemas/WorkareaTreeFolderModel'
          nullable: true
      additionalProperties: false
    WorkflowAssignmentConfigModel:
      type: object
      properties:
        description:
          type: string
          nullable: true
        users:
          type: array
          items:
            type: string
          nullable: true
        roles:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        fieldTypeIds:
          type: array
          items:
            type: string
          nullable: true
        enrichmentExperience:
          type: string
          nullable: true
        workflowTemplateId:
          type: integer
          format: int32
          nullable: true
        channelId:
          type: integer
          format: int32
          nullable: true
      additionalProperties: false
    WorkflowEntityHistoryDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        workflowId:
          type: integer
          format: int32
        entityId:
          type: integer
          format: int32
        startedAt:
          type: string
          format: date-time
        completedAt:
          type: string
          format: date-time
          nullable: true
      additionalProperties: false
    WorkflowModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
          nullable: true
        entityTypeId:
          type: string
          nullable: true
        isActive:
          type: boolean
        triggerType:
          type: string
          nullable: true
        triggerConfig:
          nullable: true
        phase:
          type: string
          nullable: true
        createdBy:
          type: string
          nullable: true
          readOnly: true
        modifiedBy:
          type: string
          nullable: true
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        modifiedAt:
          type: string
          format: date-time
          readOnly: true
        ruleConfig:
          $ref: '#/components/schemas/WorkflowRuleConfigModel'
      additionalProperties: false
    WorkflowRuleConfigModel:
      type: object
      properties:
        type:
          type: string
          nullable: true
        data:
          nullable: true
      additionalProperties: false
    WorkflowRuleModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
          nullable: true
        ruleConfig:
          $ref: '#/components/schemas/WorkflowRuleConfigModel'
        assignmentConfig:
          $ref: '#/components/schemas/WorkflowAssignmentConfigModel'
      additionalProperties: false
    WorkflowStepModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
          readOnly: true
        name:
          type: string
          nullable: true
      additionalProperties: false
    WorkflowStepStateDto:
      type: object
      properties:
        workflowStepId:
          type: integer
          format: int32
        entityCount:
          type: integer
          format: int32
      additionalProperties: false
  securitySchemes:
    ApiKey:
      type: apiKey
      description: My description
      name: X-inRiver-APIKey
      in: header
security:
  - ApiKey: []
